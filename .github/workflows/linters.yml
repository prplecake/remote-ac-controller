name: Linters (Homeserver)

on:
  push:
    paths-ignore:
      - '.**'
      - '!.github/workflows/linters.yml'
      - '!homeserver/.flake8'
      - '!homeserver/.eslintrc.json'
      - '!homeserver/.stylelintrc.json'
      - '!homeserver/.prettierrc.json'
      - '!homeserver/.prettierignore'
      - 'README.md'
      - 'dist/**'
      - 'docs/**'
      - 'homeserver/yarn.lock'
      - 'homeserver/package.json'
      - 'homeserver/Pipfile'
      - 'homeserver/Pipfile.lock'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  work-dir: ./homeserver

defaults:
  run:
    working-directory: ./homeserver

jobs:
  flake8:
    name: Flake8 (Python)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pipenv'
      - name: Install Pipenv
        run: python -m pip install --upgrade pipenv wheel
      - run: pipenv install --deploy --dev
      - name: Analysing the code with flake8
        if: always()
        run: pipenv run flake8

  eslint:
    name: ESLint (JavaScript)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"
          cache-dependency-path: ./homeserver/yarn.lock
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/{1}', env.work-dir, '**/package-lock.json'), format('{0}/{1}', env.work-dir, '**/yarn.lock')) }}-${{ hashFiles(format('{0}/{1}', env.work-dir, '**.[jt]s'), format('{0}/{1}', env.work-dir, '**.[jt]sx')) }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles(format('{0}/{1}', env.work-dir, '**/package-lock.json'), format('{0}/{1}', env.work-dir, '**/yarn.lock')) }}-
      - name: Install dependencies
        run: yarn install
      - name: Analysing the code with eslint
        if: always()
        run: yarn test:lint:js

  stylelint:
    name: Stylelint (CSS)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "yarn"
          cache-dependency-path: ./homeserver/yarn.lock
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/{1}', env.work-dir,  '**/package-lock.json'), format('{0}/{1}', env.work-dir, '**/yarn.lock')) }}-${{ hashFiles(format('{0}/{1}', env.work-dir,  '**.[jt]s'), format('{0}/{1}', env.work-dir, '**.[jt]sx')) }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-node-${{ hashFiles(format('{0}/{1}', env.work-dir, '**/package-lock.json'), format('{0}/{1}', env.work-dir, '**/yarn.lock')) }}-
      - name: Install dependencies
        run: yarn install
      - name: Analysing the code with eslint
        if: always()
        run: yarn test:lint:sass
